import logging

from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from cars import cars

TOKEN = '6677591247:AAFf_DsbQ-2k6Juz_gf39ieeT_6DnnXLECQ'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

async def set_default_commands(dp):
    await bot.set_my_commands(
        [
            types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
            types.BotCommand('add_car', '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –º–∞—à–∏–Ω—É'),
            types.BotCommand('favorite_car', '–í–∏–∑–Ω–∞—á–∏—Ç–∏ —É–ª—é–±–ª–µ–Ω—É –º–∞—à–∏–Ω—É'),
            types.BotCommand('show_favorite_cars', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –º–∞—à–∏–Ω'),
            types.BotCommand('delete_car', '–í–∏–¥–∞–ª–∏—Ç–∏ –º–∞—à–∏–Ω—É')
        ]
    )

@dp.message_handler(commands='start')
async def start(message: types.Message):
    car_choice = InlineKeyboardMarkup()
    for car in cars:
        button = InlineKeyboardButton(text=car, callback_data=car)
        car_choice.add(button)
    await message.answer(text='–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–º–∞—à–∏–Ω–æ–∑–Ω–∞–≤–µ—Ü—å\n –û–±–µ—Ä–∏ –º–∞—à–∏–Ω—É, –ø—Ä–æ —è–∫—É —Ç–∏ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è.', reply_markup=car_choice)

@dp.callback_query_handler()
async def get_car_info(callback_query: types.CallbackQuery):
    if callback_query.data in cars.keys():
        await bot.send_photo(callback_query.message.chat.id, cars[callback_query.data]['photo'])
        url = cars[callback_query.data]['site_url']
        producing_country = cars[callback_query.data]['producing_country']
        graduation_year = cars[callback_query.data]['graduation_year']
        price = cars[callback_query.data]['price']
        message = f"<b>–°–∞–π—Ç: </b> {url}\n\n<b>–†—ñ–∫ –≤–∏–ø—É—Å–∫—É: </b> {graduation_year}\n\n<b>–ö—Ä–∞—ó–Ω–∞ –≤–∏–ø—É—Å–∫—É: </b> {producing_country}\n\n<b>–¶—ñ–Ω–∞: </b> {price}"
        await bot.send_message(callback_query.message.chat.id, message, parse_mode='html')
    else:
        await bot.send_message(callback_query.message.chat.id, '–ú–∞—à–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüòü')


@dp.message_handler(commands='add_car')
async def add_new_car(message: types.Message, state: FSMContext):
    await state.set_state('set_car_name')
    await message.answer(text='–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–∞—à–∏–Ω–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏')

car_name = ''

@dp.message_handler(state='set_car_name')
async def set_car_name(message: types.Message, state: FSMContext):
    global car_name
    if len(message.text) > 100:
        message.answer('–ù–∞ –∂–∞–ª—å, —è –Ω–µ –º–æ–∂—É –¥–æ–¥–∞—Ç–∏ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å, –∞–¥–∂–µ –¥–æ–≤–∂–∏–Ω–∞ –π–æ–≥–æ –Ω–∞–∑–≤–∏ –ø–µ—Ä–µ–≤–∏—â—É—é 50 —Å–∏–º–≤–æ–ª–∏')
    else:
        car_name = message.text
        cars[car_name] = {}
        await state.set_state('set_site_url')
        await message.answer(text='–î–æ–±—Ä–µ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –Ω–∞ –≤–µ–±—Å–∞–π—Ç')

@dp.message_handler(state='set_site_url')
async def set_site_url(message: types.Message, state: FSMContext):
    global car_name
    car_site_url = message.text
    cars[car_name]['site_url'] = car_site_url
    await state.set_state('graduation_year')
    await message.answer(text='–î–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –º–∞—à–∏–Ω–∏')

@dp.message_handler(state='graduation_year')
async def graduation_year(message: types.Message, state: FSMContext):
    global car_name
    car_graduation_year = message.text
    cars[car_name]['graduation_year'] = car_graduation_year
    await state.set_state('set_producing_country')
    await message.answer(text='–ß—É–¥–æ–≤–æ) –î–æ–¥–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –∫—Ä–∞—ó–Ω—É –≤–∏–¥–∞–Ω–Ω—è –º–∞—à–∏–Ω–∏')

@dp.message_handler(state='set_producing_country')
async def set_producing_country(message: types.Message, state: FSMContext):
    global car_name
    car_producing_country = message.text
    cars[car_name]['producing_country'] = car_producing_country
    await state.set_state('set_price')
    await message.answer(text='–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ. –í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —Ü—ñ—î—ó –º–∞—à–∏–Ω–∏(–≤ –¥–æ–ª–∞—Ä–∞—Ö)')

@dp.message_handler(state='set_price')
async def price(message: types.Message, state: FSMContext):
    global car_name
    car_price = message.text
    cars[car_name]['price'] = car_price
    await state.set_state('set_photo')
    await message.answer('–§–∞–π–Ω–æ. –ü—Ä–æ—à—É —Ñ–æ—Ç–æ —Ü—ñ—î—ó –º–∞—à–∏–Ω–∏')


@dp.message_handler(state='set_photo')
async def set_photo(message: types.Message, state: FSMContext):
    global car_name
    car_photo = message.text
    cars[car_name]['photo'] = car_photo
    await state.finish()
    await message.answer(text='–ù–æ–≤–∞ –º–∞—à–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏')

fav_cars = []

@dp.message_handler(commands='favorite_car')
async def add_favorite_car(message: types.Message, state: FSMContext):
    await state.set_state('set_favorite_car')
    await message.answer(text='–Ø–∫–∞ –≤–∞—à–∞ —É–ª—é–±–ª–µ–Ω–∞ –º–∞—à–∏–Ω–∞?')

@dp.message_handler(state='set_favorite_car')
async def set_favorite_car(message: types.Message, state: FSMContext):
    favorite_car = message.text
    fav_cars.append(' ')
    if favorite_car:
        fav_cars.append(f"–ù–∞–∑–≤–∞: {favorite_car}")
        await state.set_state('set_fav_url')
        await message.answer(text='–ü—Ä–µ–∫—Ä–∞—Å–Ω–∏–π –≤–∏–±—ñ—Ä! –î–æ–¥–∞–π—Ç–µ —Å–∞–π—Ç –º–∞—à–∏–Ω–∏')
    else:
        await message.answer(text='–í–∏ –Ω–µ –≤–≤–µ–ª–∏ —É–ª—é–±–ª–µ–Ω—É –º–∞—à–∏–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É:')

@dp.message_handler(state='set_fav_url')
async def set_fav_photo(message: types.Message, state: FSMContext):  
    fav_url = message.text 
    fav_cars.append(' ')
    cars['set_fav_url'] = fav_url
    fav_cars.append(f"–°–∞–π—Ç –ø—Ä–æ –º–∞—à–∏–Ω—É: {fav_url}") 
    await state.set_state('set_fav_grad_year')
    await message.answer(text='–î—É–∂–µ –¥–æ–±—Ä–µ. –î–æ–¥–∞–π—Ç–µ —Ä—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è –º–∞—à–∏–Ω–∏')

@dp.message_handler(state='set_fav_grad_year')
async def set_fav_grad_year(message:types.Message, state:FSMContext):
    fav_grad_year = message.text
    fav_cars.append(' ')
    cars['set_fav_grad_year'] = fav_grad_year
    fav_cars.append(f"–†—ñ–∫ –≤–∏–ø—É—Å–∫—É: {fav_grad_year}")
    await state.set_state('set_fav_prod_country')
    await message.answer('–î—É–∂–µ –¥–æ–±—Ä–µ. –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫—Ä–∞—ó–Ω—É –≤–∏–ø—É—Å–∫—É')

@dp.message_handler(state='set_fav_prod_country')
async def set_fav_prod_country(message: types.Message, state:FSMContext):   
    fav_prod_country = message.text
    fav_cars.append(' ')
    cars['set_fav_prod_country'] = fav_prod_country
    fav_cars.append(f"–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫: {fav_prod_country}")
    await state.set_state('set_fav_price')
    await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –º–∞—à–∏–Ω–∏ –º–∞—à–∏–Ω–∏(–¥–æ–ª–∞—Ä–∞—Ö)')

@dp.message_handler(state='set_fav_price')
async def set_fav_price(message: types.Message, state: FSMContext): 
    fav_price = message.text
    fav_cars.append(' ')
    cars['set_fav_price'] = fav_price
    fav_cars.append(f"–¶—ñ–Ω–∞: {fav_price} $")
    await state.set_state('set_fav_photo')
    await message.answer('–ß—É–¥–æ–≤–æ. –ü—Ä–∏–∫—Ä–µ–ø—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –º–∞—à–∏–Ω–∏')
    
@dp.message_handler(state='set_fav_photo')
async def set_fav_photo(message: types.Message, state: FSMContext):  
    fav_photo = message.text 
    fav_cars.append(' ')
    cars['set_fav_photo'] = fav_photo
    fav_cars.append(f"–§–æ—Ç–æ: {fav_photo}")
    await message.answer('–ú–∞—à–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö')
    await state.finish()

@dp.message_handler(commands='show_favorite_cars')
async def show_favorite_cars(message: types.Message):
    if fav_cars:
        cars_list = "\n".join(fav_cars)
        await message.answer(f'–ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –º–∞—à–∏–Ω:\n{cars_list}')
    else:
        await message.answer('–ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –º–∞—à–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π.')

@dp.message_handler(commands='delete_car')
async def delete_car(message: types.Message, state: FSMContext):
    await state.set_state('delete_car')
    await message.answer(text='–Ø–∫—É –º–∞—à–∏–Ω—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏?')

@dp.message_handler(state='delete_car')
async def delete_car(message: types.Message, state: FSMContext):
    car_name = message.text
    if car_name in cars:
        del cars[car_name]
        await message.answer(text = f'{car_name} –≤–∏–¥–∞–ª–µ–Ω–æ')
        await state.finish()
    else:
        await message.answer(text = f'{car_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')

async def on_startup(dp):
    await set_default_commands(dp)

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)